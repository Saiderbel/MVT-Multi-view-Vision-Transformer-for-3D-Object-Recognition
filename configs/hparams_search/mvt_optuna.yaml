# @package _global_

# example hyperparameter optimization of some experiment with Optuna:
# python train.py -m hparams_search=mvt_optuna experiment=example

defaults:
  - override /hydra/sweeper: optuna

# choose metric which will be optimized by Optuna
# make sure this is the correct name of some metric logged in lightning module!
optimized_metric: "val/acc"

# here we define Optuna hyperparameter search
# it optimizes for value returned from function with @hydra.main decorator
# docs: https://hydra.cc/docs/next/plugins/optuna_sweeper
hydra:
  sweeper:
    _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper

    # storage URL to persist optimization results
    # for example, you can use SQLite if you set 'sqlite:///example.db'
    storage: null

    # name of the study to persist optimization results
    study_name: hp_search

    # number of parallel workers
    n_jobs: 2

    # 'minimize' or 'maximize' the objective
    direction: maximize

    # total number of runs that will be executed
    n_trials: 25

    # choose Optuna hyperparameter sampler
    # docs: https://optuna.readthedocs.io/en/stable/reference/samplers.html
    sampler:
      _target_: optuna.samplers.TPESampler
      seed: 12345
      n_startup_trials: 10 # number of random sampling runs before optimization starts

    # define range of hyperparameters
    params:
      #datamodule.batch_size: choice(16, 32, 64)
      model.lr: interval(0.000001, 0.0005)
      model.weight_decay: interval(0.0, 0.06)
      model.classifier_dropout: interval(0.0, 0.5)
      model.transformer_dropout: interval(0.0, 0.5)
      datamodule.augmentation_level: interval(0.2, 0.5)
      # model.expansion_ratio: interval(1.00000000001, 4)


